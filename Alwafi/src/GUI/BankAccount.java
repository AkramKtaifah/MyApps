package GUI;


import Entities.BankData;
import java.awt.Component;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import jdk.nashorn.internal.runtime.regexp.joni.exception.JOniException;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author AkramKutifah
 */
public class BankAccount extends javax.swing.JFrame {

    /**
     * Creates new form BankAccount
     */
    
    DefaultTableModel model = null;
    ArrayList<BankData> data = null, all = null;
    String sDate = "";
    String eDate = "";
    DecimalFormat df = null;
    public BankAccount() {
        initComponents();
        
        data = new ArrayList<>();
        all = new ArrayList<>();
        df = new DecimalFormat("0.00");
        df.setGroupingUsed(true);
        df.setGroupingSize(3);
        
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment( JLabel.CENTER );
        
        for(int i = 0; i < 5; i++){
            
            
            if(i <= 2){
                jTable11.getColumnModel().getColumn(i).setCellRenderer( new DecimalFormatRenderer2() );
            }
            else{
                jTable11.getColumnModel().getColumn(i).setCellRenderer( centerRenderer );
            }
        }
        model = (DefaultTableModel) jTable11.getModel();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jXDatePicker1 = new org.jdesktop.swingx.JXDatePicker();
        jXDatePicker2 = new org.jdesktop.swingx.JXDatePicker();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane10 = new javax.swing.JScrollPane();
        jTable11 = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("كشف البنك");
        setResizable(false);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel1.setText("من تاريخ:");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel2.setText("الى تاريخ:");

        jTable11.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jTable11.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "الرصيد", "المبلغ المودع", "المبلغ المسحوب", "التفاصيل", "التاريخ"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable11.setRowHeight(25);
        jTable11.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable11.getTableHeader().setReorderingAllowed(false);
        jScrollPane10.setViewportView(jTable11);

        jButton3.setBackground(new java.awt.Color(0, 153, 153));
        jButton3.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        jButton3.setText("عرض");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTextField1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N

        jTextField2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N

        jTextField3.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N

        jButton1.setBackground(new java.awt.Color(0, 153, 153));
        jButton1.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        jButton1.setText("حفظ التعديلات");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(0, 153, 153));
        jButton2.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        jButton2.setText("حذف");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 21, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton3)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jXDatePicker2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(jXDatePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(21, 21, 21))))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 1115, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jXDatePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jXDatePicker2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 451, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(41, 41, 41)
                .addComponent(jButton2)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(102, 102, 102)
                    .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(103, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try{
        if(jXDatePicker1.getDate() != null && jXDatePicker2.getDate() != null){
            Date startDate = jXDatePicker1.getDate();
            Date endDate = jXDatePicker2.getDate();
            
            int startYear = startDate.getYear();
            int endYear = endDate.getYear();
            
            int startMonth = startDate.getMonth() + 1;
            int endMonth = endDate.getMonth() + 1;
            
            
            if(startYear <= endYear){
                if(startMonth <= endMonth){
                    
                        
                        String startMonthStr = "";
                        String endMonthStr = "";
                        if(startMonth < 10){
                            startMonthStr = "0" + startMonth;
                        }
                        else{
                            startMonthStr = startMonth + "";
                        }
                        if(endMonth < 10){
                            endMonthStr = "0" + endMonth;
                        }
                        else{
                            endMonthStr = endMonth + "";
                        }
                        
                        String sd = startDate.toString();
                        String[] dd = sd.split(" ");

                        String ed = endDate.toString();
                        String[] dd2 = ed.split(" ");
                        
                        if(Integer.parseInt(dd[2]) <= Integer.parseInt(dd2[2])){
                        sDate = dd[5] + "-" + startMonthStr + "-" + dd[2];
                        eDate = dd2[5] + "-" + endMonthStr + "-" + dd2[2];
                        updateTable();
                        }
                        else{
                            JOptionPane.showMessageDialog(null, "يجب أن يكون تاريخ البداية أصغر أو يساوي تاريخ النهاية");
                        }
                }
                else{
                    JOptionPane.showMessageDialog(null, "يجب أن يكون تاريخ البداية أصغر أو يساوي تاريخ النهاية");
                }
            }
            else{
                JOptionPane.showMessageDialog(null, "يجب أن يكون تاريخ البداية أصغر أو يساوي تاريخ النهاية");
            }
            
        }
        else{
            JOptionPane.showMessageDialog(null, "يجب أن يكون حقلي التواريخ ممتلئان");
        }
        }catch(Exception e){
            
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        jTextField1.setEditable(false);
        jTextField2.setEditable(false);
        jTextField3.setEditable(false);
        jButton1.setEnabled(false);
        jButton2.setEnabled(false);
    }//GEN-LAST:event_formComponentShown

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try{
        if(model.getRowCount() > 0){
            
            boolean state = false;
            int i = 0;
            for(int row = 0; row < model.getRowCount(); row++){
                
                state = false;
                String details = model.getValueAt(row, 3).toString();
                double deposit = (Double)model.getValueAt(row, 1);
                double withdraw = (Double)model.getValueAt(row, 2);
                double balance = (Double)model.getValueAt(row, 0);
                
                    if(!details.equals(data.get(row).getDetails())){
                        state = true;
                        i = 1;
                    }
                    if(data.get(row).getDeposit() != 0){
                        if(withdraw != 0){
                                JOptionPane.showMessageDialog(null, "القيمة الصفرية لا يمكن تعديلها");
                                model.setValueAt(0, row, 2);
                                i = 0;
                                break;
                        }
                        if(deposit != data.get(row).getDeposit()){
                            if(deposit > 0){
                                double temp = balance - data.get(row).getDeposit();
                                balance = temp + deposit;
                                state = true;
                                i = 1;
                            }
                            else{
                                JOptionPane.showMessageDialog(null, "يجب أن تكون القيمة أكبر من الصفر");
                                model.setValueAt(data.get(row).getDeposit(), row, 1);
                                i = 0;
                                break;
                            }
                            
                        }
                        
                    }
                    
                    else{
                        if(deposit != 0){
                                JOptionPane.showMessageDialog(null, "القيمة الصفرية لا يمكن تعديلها");
                                model.setValueAt(0, row, 1);
                                i = 0;
                                break;
                        }
                        if(withdraw != data.get(row).getWithdraw()){
                            if(withdraw > 0){
                                double temp = balance + data.get(row).getWithdraw();
                                if(withdraw <= temp){
                                    balance = temp - withdraw;
                                    state = true;
                                    i = 1;
                                }
                                else{
                                    JOptionPane.showMessageDialog(null, "لايوجد رصيد كافي في الحساب لسحب هذا المبلغ");
                                    model.setValueAt(temp, row, 2);
                                    i = 0;
                                    break;
                                }
                                
                                
                            }
                            else{
                                JOptionPane.showMessageDialog(null, "يجب أن تكون القيمة أكبر من الصفر");
                                model.setValueAt(data.get(row).getWithdraw(), row, 2);
                                i = 0;
                                break;
                            }
                            
                        }
                        
                    }
                    
                    if(state){
                    try {
                        
                        String sql = "update bank set details = '" + details + "', withdraw = " + withdraw + ", deposit = " + deposit + ", balance = " + balance + " where id = " + data.get(row).getId() + "";
                        mainGUI.db.update(sql);
                        
                        if(data.get(row).getDeposit() != deposit || data.get(row).getWithdraw() != withdraw){
                            String sql2 = "select * from bank where id > " + data.get(row).getId() + "";
                            ResultSet rs2 = mainGUI.db.select(sql2);
                            all = new ArrayList<>();
                            while(rs2.next()){
                                all.add(new BankData(rs2.getLong("id"), rs2.getString("details"), rs2.getDouble("withdraw"), rs2.getDouble("deposit"), rs2.getString("date"), rs2.getDouble("balance")));
                            }


                            for(int j = 0; j < all.size(); j++){
                                balance = balance + all.get(j).getDeposit() - all.get(j).getWithdraw();
                                String sql3 = "update bank set balance = " + balance + " where id = " + all.get(j).getId() + "";
                                mainGUI.db.update(sql3);
                            }
                        }
                        
                    } catch (SQLException ex) {
                        Logger.getLogger(mainGUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                        
                    }
            
            }
                    if(i != 0){
                        JOptionPane.showMessageDialog(null, "تمت عملية التعديل بنجاح"); 
                        updateTable();
                    }
                    
        }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, "لايمكن أن يكون هناك خلية رقمية فارغة في الجدول");
            updateTable();
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
        if(jTable11.getSelectedRow() >= 0){
            int choice = JOptionPane.showConfirmDialog(null, "هل أنت متأكد من هذه العملية؟", "تنبيه!!!", JOptionPane.YES_NO_OPTION);
            if(choice == JOptionPane.YES_OPTION){
                    
                    int id = jTable11.getSelectedRow();
                    double balance = (Double)model.getValueAt(id, 0) - (Double)model.getValueAt(id, 1) + (Double)model.getValueAt(id, 2);
                    
                    String sql = "delete from bank where id = " + data.get(id).getId() + "";
                    mainGUI.db.delete(sql);
                    
                    String sql2 = "select * from bank where id > " + data.get(id).getId() + "";
                            ResultSet rs2 = mainGUI.db.select(sql2);
                            all = new ArrayList<>();
                            while(rs2.next()){
                                all.add(new BankData(rs2.getLong("id"), rs2.getString("details"), rs2.getDouble("withdraw"), rs2.getDouble("deposit"), rs2.getString("date"), rs2.getDouble("balance")));
                            }

                            for(int j = 0; j < all.size(); j++){
                                balance = balance + all.get(j).getDeposit() - all.get(j).getWithdraw();
                                String sql3 = "update bank set balance = " + balance + " where id = " + all.get(j).getId() + "";
                                mainGUI.db.update(sql3);
                            }
                
                    updateTable();
                    JOptionPane.showMessageDialog(null, "تمت عملية الحذف بنجاح");
            }
                
        }
        else{
            JOptionPane.showMessageDialog(null, "يجب أن تختار سطر من الجدول حتى تتم عملية الحذف وذلك عن طريق النقر بالفأرة على السطر المطلوب");
        }
        }catch(Exception e){}
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BankAccount.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BankAccount.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BankAccount.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BankAccount.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BankAccount().setVisible(true);
            }
        });
    }
    public void updateTable(){
        data = new ArrayList<>();
        model.setRowCount(0);
                        try{
                        String sql = "select * from bank where date between '" + sDate + "' and '" + eDate + "' order by date";
                        ResultSet rs = mainGUI.db.select(sql);
                        
                        double withdraw = 0;
                        double deposit = 0;
                        double balance = 0;
                        
                        while(rs.next()){
                            withdraw += rs.getDouble("withdraw");
                            deposit += rs.getDouble("deposit");
                            balance = rs.getDouble("balance");
                            model.addRow(new Object[]{rs.getDouble("balance"), rs.getDouble("deposit"), rs.getDouble("withdraw"), rs.getString("details"), rs.getString("date")});
                            data.add(new BankData(rs.getLong("id"), rs.getString("details"), rs.getDouble("withdraw"), rs.getDouble("deposit"), rs.getString("date"), rs.getDouble("balance")));
                        }
                        
                        model.fireTableDataChanged();
                        jTable11.setModel(model);
                        
                        if(model.getRowCount() > 0){
                            jTextField1.setText(df.format(withdraw) + "");
                            jTextField2.setText(df.format(deposit) + "");
                            jTextField3.setText(df.format(balance) + "");
                            jButton1.setEnabled(true);
                            jButton2.setEnabled(true);
                        }
                        else{
                            
                            jTextField1.setText("");
                            jTextField2.setText("");
                            jTextField3.setText("");
                            jButton1.setEnabled(false);
                            jButton2.setEnabled(false);
                            JOptionPane.showMessageDialog(null, "لا يوجد عمليات على هذا الحساب خلال هذه الفترة المحددة");
                        }
                        }catch(Exception e){
                            
                        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JTable jTable11;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private org.jdesktop.swingx.JXDatePicker jXDatePicker1;
    private org.jdesktop.swingx.JXDatePicker jXDatePicker2;
    // End of variables declaration//GEN-END:variables

static class DecimalFormatRenderer2 extends DefaultTableCellRenderer {
      private static final DecimalFormat formatter = new DecimalFormat( "0.00" );
      
      
      public Component getTableCellRendererComponent(
         JTable table, Object value, boolean isSelected,
         boolean hasFocus, int row, int column) {
 
         // First format the cell value as required
         this.setHorizontalAlignment( JLabel.CENTER );
         formatter.setGroupingUsed(true);
         formatter.setGroupingSize(3);
         value = formatter.format((Number)value);
         
         
            // And pass it on to parent class
 
         return super.getTableCellRendererComponent(
            table, value, isSelected, hasFocus, row, column );
      }
   }
}
