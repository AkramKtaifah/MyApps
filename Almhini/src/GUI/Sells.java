package GUI;


import Utilities.DatabaseOperations;
import Entities.Product;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Akram Kutifah
 */
public class Sells extends javax.swing.JFrame {
    
    static ArrayList<String> nameOfTables = null;
    ArrayList<Product> productArray = null;
    DatabaseOperations db = null;
    DefaultTableModel model = null;
    String type = null;
    String name = null;
    ArrayList<Double> quantities = null;
    ArrayList<Double> prices = null;
    ArrayList<Long> itemIDs = null;
    int status = 0;
    
    /**
     * Creates new form Sells
     */
    public Sells() throws Exception {
        initComponents();
        db = MainFrame.db;
        nameOfTables = new ArrayList<>();
        quantities = new ArrayList<>();
        prices = new ArrayList<>();
        itemIDs = new ArrayList<>();
        
        boolean state = false;
        ResultSet rs = db.getNameOfTables();
                while(rs.next()){
                    if(rs.getString(3).equals("sells")){
                        state = true;
                    }
                    else if(!rs.getString(3).equals("bills") & !rs.getString(3).equals("sells")){
                        nameOfTables.add(rs.getString(3));
                    }
                }
        
        for(int i = 0; i < nameOfTables.size(); i++){
            jComboBox1.addItem(nameOfTables.get(i));
        }
        if(state){
            String sql = "select billNum from sells";
            rs = db.select(sql);
            long billNum = 0;

            while(rs.next()){
                billNum = rs.getLong("billNum");
            }
            billNum++;
            jLabel8.setText(billNum + "");
        }
        else{
            jLabel8.setText(1 + "");
        }
        
        jTextField1.setEnabled(false);
        jButton2.setEnabled(false);
        jButton3.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel5 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("واجهة المبيعات");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("جميع الأصناف");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("العناصر التابعة للصنف المحدد");

        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("الكمية");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setText("سعر الكمية الواحدة");

        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(204, 255, 204));
        jButton1.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        jButton1.setText("اضافة الى الفاتورة");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "السعر الكلي", "سعر الكمية الواحدة", "الكمية", "العنصر", "الصنف"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setName(""); // NOI18N
        jTable1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jTable1MouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jTable1MouseMoved(evt);
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTable1KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTable1KeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setText("جدول الفاتورة رقم ");

        jButton2.setBackground(new java.awt.Color(204, 255, 204));
        jButton2.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        jButton2.setText("تسجيل الفاتورة");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(204, 255, 204));
        jButton3.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        jButton3.setText("حذف");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setText("اجمالي الفاتورة");

        jLabel9.setFont(new java.awt.Font("Tahoma", 3, 12)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 0, 0));

        jLabel8.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jTextField2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(75, 75, 75)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jTextField1)
                                    .addComponent(jLabel4))
                                .addGap(78, 78, 78)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(76, 76, 76)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(17, 17, 17)
                                                .addComponent(jLabel6))
                                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE))
                                        .addGap(36, 36, 36)))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 603, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(218, 218, 218)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addComponent(jLabel6)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton2)
                                .addContainerGap())
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton3)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        try{
        type = (String)jComboBox1.getSelectedItem();
        update_table(type);
        }catch(Exception e){}
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        name = (String) jComboBox2.getSelectedItem();
        jTextField1.setText("");
        
        for(int i = 0; i < productArray.size(); i++){
            if(productArray.get(i).getName().equals(name)){
                jTextField1.setText(productArray.get(i).getPrice() + "");
                break;
            }
        }
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try{
        if((!jTextField2.getText().equals("")) & (!jTextField2.getText().equals("[ ]+"))){
            double quantity = Double.parseDouble(jTextField2.getText());
            
        
            if(quantity > 0){
                for(int i = 0; i < productArray.size(); i++){
                if(productArray.get(i).getName().equals(name)){
                    
                    if(jTable1.getRowCount() < 1){
                    if(productArray.get(i).getQuantity() >= quantity){
                        double price = productArray.get(i).getPrice();
                        
                        showTable(status, price, quantity, productArray.get(i).getId());
                        
                        jTextField2.setText("");
                    }
                    else{
                        String s = productArray.get(i).getQuantity() + "";
                        JOptionPane.showMessageDialog(null, "قيمة حقل الكمية يجب أن تكون أصغر أو تساوي " + s);
                        jTextField2.setText("");
                    }
                    }
                    else{
                        
                            double inTable = checkQuantity();
                            double currentQuantity = productArray.get(i).getQuantity() - inTable;
                            if(currentQuantity == 0){
                                JOptionPane.showMessageDialog(null, "لم يعد بامكانك اضافة هذا العنصر الى الفاتورة و ذلك لأن الكمية نفذت");
                                jTextField2.setText("");
                            }
                            else if(currentQuantity >= quantity){
                                double price = productArray.get(i).getPrice();
                        
                                showTable(status, price, inTable + quantity, productArray.get(i).getId());

                                jTextField2.setText("");
                            }
                            else{
                                String s = currentQuantity + "";
                                JOptionPane.showMessageDialog(null, "قيمة حقل الكمية يجب أن تكون أصغر أو تساوي " + s);
                                jTextField2.setText("");
                            }
                    }
                    break;
                }
                }
            }
            else{
                JOptionPane.showMessageDialog(null, "قيمة حقل الكمية يجب أن تكون أكبر من الصفر");
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "حقل الكمية يجب أن يكون ممتلئ");
            jTextField2.setText("");
        }
        
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, "قيمة حقل الكمية يجب أن تكون رقما صحيحا");
            jTextField2.setText("");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        jButton3.setEnabled(true);
        
        
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        status = 1;
        showTable(status, 0, 0, 0);
        status = 0;
        if(model.getRowCount() < 1){
            jButton3.setEnabled(false);
            jButton2.setEnabled(false);
            jLabel9.setText("");
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jTable1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyPressed
        
    }//GEN-LAST:event_jTable1KeyPressed

    private void jTable1MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseMoved
        
    }//GEN-LAST:event_jTable1MouseMoved

    private void jTable1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseDragged
        
    }//GEN-LAST:event_jTable1MouseDragged

    private void jTable1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyReleased
        try{
        
        model = (DefaultTableModel) jTable1.getModel();
        
                if(model.getRowCount() > 0){
                
                    for(int row = 0; row < model.getRowCount(); row++){
                        
                        if((Double)model.getValueAt(row, 1) == null || (Double)model.getValueAt(row, 2) == null){
                            JOptionPane.showMessageDialog(null, "لا يمكن أن تكون احد القيم فارغة");
                            model.setValueAt(prices.get(row), row, 1);
                            model.setValueAt(quantities.get(row), row, 2);
                            break;
                        }
                        if(((Double)model.getValueAt(row, 1) < 1) || ((Double)model.getValueAt(row, 2) < 0)){
                            JOptionPane.showMessageDialog(null, "قيمة أحد الحقلين (الكمية، السعر) يجب أن تكون أكبر من الصفر");
                            model.setValueAt(prices.get(row), row, 1);
                            model.setValueAt(quantities.get(row), row, 2);
                            break;
                        }
                        selectAllProducts((String) model.getValueAt(row, 4));
                        
                        for(int i = 0; i < productArray.size(); i++){
                            
                            if(productArray.get(i).getName().equals(model.getValueAt(row, 3))){
                                double inTable = (Double)model.getValueAt(row, 2);
                                 
                                if(productArray.get(i).getQuantity() < inTable){
                                    JOptionPane.showMessageDialog(null, "الكمية الموجودة من هذا العنصر هي: " + productArray.get(i).getQuantity() + " " +"لذلك لايمكن اضافة كمية اكثر منها ");
                                    model.setValueAt(quantities.get(row), row, 2);
                                    model.fireTableDataChanged();
                                        
                                }
                                break;
                            }
                        }
                                quantities.set(row, (Double)model.getValueAt(row, 2));
                                prices.set(row, (Double)model.getValueAt(row, 1));
                                
                                double total = (Double)model.getValueAt(row, 1) * (Double)model.getValueAt(row, 2);
                                model.setValueAt(total, row, 0);
                                      
                    }
                    model.fireTableDataChanged();
                    jTable1.setModel(model);
                    
                    double billTotal = 0.0;
                    for(int row = 0; row < model.getRowCount(); row++){
                        billTotal += (Double)model.getValueAt(row, 0);
                    }
                    jLabel9.setText(billTotal + "     ل.س");

                }
        
        }catch(Exception e){}
    }//GEN-LAST:event_jTable1KeyReleased

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try{
            
        int choice = JOptionPane.showConfirmDialog(null, "هل أنت متأكد من هذه العملية؟", "تنبيه!!!", JOptionPane.YES_NO_OPTION);
            if(choice == JOptionPane.YES_OPTION){
                String sql = "CREATE TABLE IF NOT EXISTS sells (\n"
                        + "	id bigint not null PRIMARY KEY AUTO_INCREMENT,\n"
                        + "     type varchar(200) null,\n"
                        + "     name varchar(200) null,\n"
                        + "     quantity double null,\n"
                        + "     price double null,\n"
                        + "     total double null,\n"
                        + "     billNum bigint null\n"
                        + ");";
                boolean bool = db.execute(sql);
                sql = "CREATE TABLE IF NOT EXISTS bills (\n"
                        + "	id bigint not null PRIMARY KEY AUTO_INCREMENT,\n"
                        + "     sellsNum bigint null,\n"
                        + "     date varchar(200) null,\n"
                        + "     time varchar(200) null\n"
                        + ");";
                bool = db.execute(sql);
                
                sql = "select billNum from sells";
                ResultSet rs = db.select(sql);
                long billNum = 0;
                
                while(rs.next()){
                    billNum = rs.getLong("billNum");
                }
                
                billNum++;
                
                for(int row = 0; row < model.getRowCount(); row++){
                    
                    String type = (String)model.getValueAt(row, 4);
                    String name = (String)model.getValueAt(row, 3);
                    double quantity = (Double)model.getValueAt(row, 2);
                    double price = (Double)model.getValueAt(row, 1);
                    double total = (Double)model.getValueAt(row, 0);
                    
                    sql = "insert into sells (type, name, quantity, price, total, billNum) values ('" + type + "', '" + name + "', " + quantity + ", " + price + ", " + total + ", " + billNum + ")";
                    db.insert(sql);
                    sql = "select quantity from " + type + " where name = '" + name + "'";
                    rs = db.select(sql);
                    double inDatabase = 0.0;
                    while(rs.next()){
                        inDatabase = rs.getDouble("quantity");
                    }
                    double finalQ = inDatabase - quantity;
                    sql = "update " + type + " set quantity = " + finalQ + " where name = '" + name + "'";
                    db.update(sql);
                    for(int i = 0; i < productArray.size(); i++){
                        if(productArray.get(i).getName().equals(name)){
                            productArray.get(i).setQuantity(finalQ);
                            break;
                        }
                    }

                }
                    DateTimeFormatter dtf = DateTimeFormatter.ofPattern("MM-dd-yyyy HH:mm:ss");  
                    LocalDateTime now = LocalDateTime.now();  
                    String s = dtf.format(now); 
                    String[] ss = s.split("[ ]");
                
                    sql = "insert into bills (sellsNum, date, time) values (" + billNum + ", '" + ss[0] + "', '" + ss[1] + "')";
                    db.insert(sql);
                    
                    JOptionPane.showMessageDialog(null, "تمت عملية تسجيل الفاتورة بنجاح");
                    jTextField2.setText("");
                    jLabel9.setText("");
                    long billID = Long.parseLong(jLabel8.getText()) + 1;
                    jLabel8.setText(billID + "");
                    jButton3.setEnabled(false);
                    jButton2.setEnabled(false);
                    model.setRowCount(0);
                    model.fireTableDataChanged();
                    jTable1.setModel(model);
            }
        }catch(Exception e){}
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        if(MainFrame.sync != null){
            jComboBox1.addItem(MainFrame.sync);
            MainFrame.sync = null;
        }       
    }//GEN-LAST:event_formWindowActivated

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        MainFrame.sells = null;
    }//GEN-LAST:event_formWindowClosing

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Sells.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Sells.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Sells.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Sells.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Sells().setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(Sells.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    
    public void update_table(String type) throws Exception{
        
            selectAllProducts(type);
            
            if(jComboBox2.getItemCount() > 0){
                jComboBox2.removeAllItems();
            }
            
            for(int i = 0; i < productArray.size(); i++){
                jComboBox2.addItem(productArray.get(i).getName());
            }
            
            if(jComboBox2.getItemCount() < 1){
                jButton1.setEnabled(false);
            }
            else{
                jButton1.setEnabled(true);
            }
    }
    
    
    public void selectAllProducts(String type) throws SQLException{
            productArray = new ArrayList<>();
            
            String sql = "select * from " + type + " order by name";
            ResultSet rs = db.select(sql);
            
            while(rs.next()){
                long id = rs.getLong("id");
                String name = rs.getString("name");
                double quantity = rs.getDouble("quantity");
                double price = rs.getDouble("price");
                String description = rs.getString("description");
                String date = rs.getString("date");
                String time = rs.getString("time");
                
                productArray.add(new Product(id, name, quantity, price, description, date, time));
            }
    }
    
    public void showTable(int status, double price, double quantity, long id){
        boolean state = false;
        
        model = (DefaultTableModel) jTable1.getModel();
        if(status == 1){
                int select = jTable1.getSelectedRow();
                model.removeRow(select);
                quantities.remove(select);
                prices.remove(select);
                itemIDs.remove(select);
        }
        else{
            for(int row = 0; row < model.getRowCount(); row++){
                if((jComboBox1.getSelectedItem().equals(model.getValueAt(row, 4))) & (jComboBox2.getSelectedItem().equals(model.getValueAt(row, 3)))){
                    model.setValueAt(quantity, row, 2);
                    double p = (Double)model.getValueAt(row, 1);
                    model.setValueAt(p*quantity, row, 0);
                    
                    quantities.set(row, quantity);
                    state = true;
                    break;
                }
            }
            if(!state){
            model.addRow(new Object[]{price*quantity, price, quantity, name, type});
            quantities.add(quantity);
            prices.add(price);
            itemIDs.add(id);
            }
            
        }
        
        
            DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
            centerRenderer.setHorizontalAlignment( JLabel.CENTER );
            
            for(int i = 0; i < 5; i++){
                jTable1.getColumnModel().getColumn(i).setCellRenderer( centerRenderer );
            }
            
            
            model.fireTableDataChanged();
            jTable1.setModel(model);
            
            double billTotal = 0.0;
            for(int row = 0; row < model.getRowCount(); row++){
                billTotal += (Double)model.getValueAt(row, 0);
            }
            jLabel9.setText(billTotal + "     ل.س");
            
            jButton2.setEnabled(true);
    }
    
    public double checkQuantity(){
        double total = 0.0;
        for(int row = 0; row < model.getRowCount(); row++){
                    
            if((jComboBox1.getSelectedItem().equals(model.getValueAt(row, 4))) & (jComboBox2.getSelectedItem().equals(model.getValueAt(row, 3)))){
                total += (Double)model.getValueAt(row, 2);
            }
                    
        }
        return total;
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
