package GUI;


import Utilities.DatabaseOperations;
import Entities.Product;
import Entities.Bill;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Akram Kutifah
 */
public class EditBill extends javax.swing.JFrame {
    
    DatabaseOperations db = null;
    String selectedDate = null;
    DefaultTableModel model = null;
    
    ArrayList<Bill> sells = null;
    ArrayList<String> nameOfTables = null;
    ArrayList<Product> productArray = null;
    
    /**
     * Creates new form editBill
     */
    public EditBill() throws Exception {
        initComponents();
        db = MainFrame.db;
        nameOfTables = new ArrayList<>();
        
        ResultSet rs = db.getNameOfTables();
                while(rs.next()){
                    if(!rs.getString(3).equals("bills") & !rs.getString(3).equals("sells")){
                        nameOfTables.add(rs.getString(3));
                    }
                }
        
        jButton1.setEnabled(false);
        jButton2.setEnabled(false);
        jButton3.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jXDatePicker1 = new org.jdesktop.swingx.JXDatePicker();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("تعديل أو الغاء فاتورة");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("اختر تاريخ اليوم للفاتورة");

        jXDatePicker1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jXDatePicker1ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("جميع الاوقات التي تم فيها البيع في التاريخ المحدد");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "السعر الكلي", "سعر الكمية الواحدة", "الكمية", "العنصر", "الصنف"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setName(""); // NOI18N
        jTable1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jTable1MouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jTable1MouseMoved(evt);
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTable1KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTable1KeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("الفاتورة رقم");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setText("اجمالي الفاتورة");

        jLabel5.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 0, 0));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        jLabel7.setFont(new java.awt.Font("Tahoma", 3, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 0, 0));

        jButton1.setBackground(new java.awt.Color(204, 255, 204));
        jButton1.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        jButton1.setText("حذف");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(204, 255, 204));
        jButton2.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        jButton2.setText("حذف هذه الفاتورة");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(204, 255, 204));
        jButton3.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        jButton3.setText("حفظ التعديلات");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(140, 140, 140)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jXDatePicker1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(38, 38, 38))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel4))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jButton3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jLabel3))))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 586, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jLabel1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jXDatePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel3)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(33, 33, 33)
                            .addComponent(jLabel4)
                            .addGap(18, 18, 18)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabel6)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton3)
                            .addGap(18, 18, 18)
                            .addComponent(jButton2))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jXDatePicker1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jXDatePicker1ActionPerformed
        try{
        
        jComboBox1.removeAllItems();
        jLabel5.setText("");
        jLabel7.setText("");
        jButton2.setEnabled(false);
        jButton3.setEnabled(false);
        Date date = jXDatePicker1.getDate();
        int monthInt = date.getMonth() + 1;
        
        String monthStr = "";
        if(monthInt < 10){
            monthStr = "0" + monthInt;
        }
        else{
            monthStr = monthInt + "";
        }
        String d = date.toString();
        String[] dd = d.split(" ");
        
        String selectedDate = monthStr + "-" + dd[2] + "-" + dd[5];
        this.selectedDate = selectedDate;
        
        String sql = "select time from bills where date = '" + selectedDate + "'";
        ResultSet rs = db.select(sql);
        ArrayList<String> array = new ArrayList<>();
        while(rs.next()){
            String s = rs.getString("time");
            array.add(s);
        }
        for(int i = 0; i < array.size(); i++){
            jComboBox1.addItem(array.get(i));
        }
        
        
        }catch(Exception e){}
    }//GEN-LAST:event_jXDatePicker1ActionPerformed

    private void jTable1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseDragged

    }//GEN-LAST:event_jTable1MouseDragged

    private void jTable1MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseMoved

    }//GEN-LAST:event_jTable1MouseMoved

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        
    }//GEN-LAST:event_jTable1MouseClicked

    private void jTable1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyPressed
        
    }//GEN-LAST:event_jTable1KeyPressed

    private void jTable1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyReleased
        try{

            model = (DefaultTableModel) jTable1.getModel();

            if(model.getRowCount() > 0){

                for(int row = 0; row < model.getRowCount(); row++){
                    
                    if((Double)model.getValueAt(row, 2) == null || (Double)model.getValueAt(row, 1) == null){
                            JOptionPane.showMessageDialog(null, "لا يمكن أن تكون احد القيم فارغة");
                            model.setValueAt(sells.get(row).getPrice(), row, 1);
                            model.setValueAt(sells.get(row).getQuantity(), row, 2);
                            break;
                    }
                    
                    if(((Double)model.getValueAt(row, 1) < 1) || ((Double)model.getValueAt(row, 2) < 1)){
                        JOptionPane.showMessageDialog(null, "قيمة أحد الحقلين (الكمية، السعر) يجب أن تكون أكبر من الصفر");
                            model.setValueAt(sells.get(row).getPrice(), row, 1);
                            model.setValueAt(sells.get(row).getQuantity(), row, 2);
                            break;
                    }
                    
                    String type = (String)model.getValueAt(row, 4);
                    String name = (String)model.getValueAt(row, 3);
                    double quantity = (Double)model.getValueAt(row, 2);
                    double price = (Double)model.getValueAt(row, 1);
                    
                    String sql = "select quantity from " + type + " where name = '" + name + "'";
                    ResultSet rs = db.select(sql);
                    double currentQ = 0.0;
                    while(rs.next()){
                        currentQ = rs.getDouble("quantity");
                    }
                    
                    double finalQ = currentQ + sells.get(row).getQuantity();
                    if(finalQ < quantity){
                        JOptionPane.showMessageDialog(null, "الكمية الموجودة من هذا العنصر هي: " + finalQ + " " +"لذلك لايمكن اضافة كمية اكثر منها ");
                        model.setValueAt(sells.get(row).getQuantity(), row, 2);
                        model.setValueAt(sells.get(row).getTotal(), row, 0);
                        break;
                    }
                    
                    quantity = (Double)model.getValueAt(row, 2);
                    price = (Double)model.getValueAt(row, 1);
                    model.setValueAt(quantity*price, row, 0);
                }
                
                model.fireTableDataChanged();
                jTable1.setModel(model);
                calBillTotal();
                
                boolean state = false;
                for(int row = 0; row < model.getRowCount(); row++){
                    double quantity = (Double)model.getValueAt(row, 2);
                    double price = (Double)model.getValueAt(row, 1);
                    
                    if(quantity != sells.get(row).getQuantity() || price != sells.get(row).getPrice()){
                        state = true;
                        break;
                    }
                }
                if(state){
                    jButton3.setEnabled(true);
                }
            }

        }catch(Exception e){}
    }//GEN-LAST:event_jTable1KeyReleased

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        try{
            
            model = (DefaultTableModel)jTable1.getModel();
            model.setRowCount(0);
            
            sells = new ArrayList<>();
            
            String time = (String)jComboBox1.getSelectedItem();
            String sql = "select sellsNum from bills where date = '" + selectedDate + "' and time = '" + time + "'";
            ResultSet rs = db.select(sql);
            long sellsNum = 0;
            while(rs.next()){
                sellsNum = rs.getLong("sellsNum");
            }
            
            sql = "select * from sells where billNum = " + sellsNum + "";
            rs = db.select(sql);
            while(rs.next()){
                long id = rs.getLong("id");
                String type = rs.getString("type");
                String name = rs.getString("name");
                double quantity = rs.getDouble("quantity");
                double price = rs.getDouble("price");
                double total = rs.getDouble("total");
                
                model.addRow(new Object[]{total, price, quantity, name, type});
                
                sells.add(new Bill(id, type, name, quantity, price, total));
            }
            
                jLabel5.setText(sellsNum + "");
            
            calBillTotal();
            DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
            centerRenderer.setHorizontalAlignment( JLabel.CENTER );
            
            for(int i = 0; i < 5; i++){
                jTable1.getColumnModel().getColumn(i).setCellRenderer( centerRenderer );
            }
            
            model.fireTableDataChanged();
            jTable1.setModel(model);
            
            if(model.getRowCount() > 1){
                jButton1.setEnabled(true);
            }
            else{
                jButton1.setEnabled(false);
            }
            jButton2.setEnabled(true);
            jButton3.setEnabled(false);
            
        }catch(Exception e){}
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try{
        if(jTable1.getSelectedRow() > -1){
            model = (DefaultTableModel)jTable1.getModel();
            int row = jTable1.getSelectedRow();
            
            String type = (String)model.getValueAt(row, 4);
            String name = (String)model.getValueAt(row, 3);
            double quantity = (Double)model.getValueAt(row, 2);
            
            String sql = "delete from sells where id = " + sells.get(row).getId() + "";
            db.delete(sql);
            sql = "select quantity from " + type + " where name = '" + name + "'";
            ResultSet rs = db.select(sql);
            double oldQ = 0.0;
            while(rs.next()){
                oldQ = rs.getDouble("quantity");
            }
            double finalQ = oldQ + quantity;
            sql = "update " + type + " set quantity = " + finalQ + " where name = '" + name + "'";
            db.update(sql);
            
            model.removeRow(row);
            sells.remove(row);
            
            model.fireTableDataChanged();
            jTable1.setModel(model);
            calBillTotal();
            if(model.getRowCount() < 2){
                jButton1.setEnabled(false);
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "يجب أن تختار سطر من الجدول ليتم حذفه");
        }
        }catch(Exception e){}
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try{
            int choice = JOptionPane.showConfirmDialog(null, "هل أنت متأكد من هذه العملية؟", "تنبيه!!!", JOptionPane.YES_NO_OPTION);
            if(choice == JOptionPane.YES_OPTION){
        
                long billId = Long.parseLong(jLabel5.getText());
                String sql = "delete from bills where sellsNum = " + billId + "";
                db.delete(sql);
                sql = "delete from sells where billNum = " + billId + "";
                db.delete(sql);
                
            for(int row = 0; row < model.getRowCount(); row++){
                String type = (String)model.getValueAt(row, 4);
                String name = (String)model.getValueAt(row, 3);
                double quantity = (Double)model.getValueAt(row, 2);
                
                sql = "select quantity from " + type + " where name = '" + name + "'";
                ResultSet rs = db.select(sql);
                double oldQ = 0.0;
                while(rs.next()){
                    oldQ = rs.getDouble("quantity");
                }
                double finalQ = oldQ + quantity;
                sql = "update " + type + " set quantity = " + finalQ + " where name = '" + name + "'";
                db.update(sql);
            }
            
            model.setRowCount(0);
            
            int index = jComboBox1.getSelectedIndex();
            jComboBox1.removeItemAt(index);
            
            if(jComboBox1.getItemCount() < 1){
                jLabel5.setText("");
                jLabel7.setText("");
                jButton2.setEnabled(false);
            }
            }  
        }catch(Exception e){}
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try{
            
        for(int row = 0; row < model.getRowCount(); row++){
            String type = (String)model.getValueAt(row, 4);
            String name = (String)model.getValueAt(row, 3);
            double quantity = (Double)model.getValueAt(row, 2);
            double price = (Double)model.getValueAt(row, 1);
            double total = (Double)model.getValueAt(row, 0);
            
            long billId = Long.parseLong(jLabel5.getText());
            
            String sql = "update sells set quantity = " + quantity + ", price = " + price + ", total = " + total + " where type = '" + type + "' and name = '" + name + "' and billNum = " + billId + "";
            db.update(sql);
            
                    sql = "select quantity from " + type + " where name = '" + name + "'";
                    ResultSet rs = db.select(sql);
                    double oldQ = 0.0;
                    while(rs.next()){
                        oldQ = rs.getDouble("quantity");
                    }
                    
                    double currentQ = oldQ + sells.get(row).getQuantity();
                    double finalQ = currentQ - quantity;
                    
            sql = "update " + type + " set quantity = " + finalQ + " where name = '" + name + "'";
            db.update(sql);
            
            sells.get(row).setQuantity(quantity);
            sells.get(row).setPrice(price);
            sells.get(row).setTotal(total);
            
            
        }
        JOptionPane.showMessageDialog(null, "تمت العملية بنجاح");
        jButton3.setEnabled(false);
        
        }catch(Exception e){}
    }//GEN-LAST:event_jButton3ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        MainFrame.editBill = null;
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EditBill.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EditBill.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EditBill.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EditBill.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new EditBill().setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(EditBill.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    
    public void calBillTotal(){
            double billTotal = 0.0;
            for(int row = 0; row < model.getRowCount(); row++){
                billTotal += (Double)model.getValueAt(row, 0);
            }
            
                jLabel7.setText(billTotal + "     ل.س");
    }
    
    public void selectAllProducts(String type) throws SQLException{
            productArray = new ArrayList<>();
            
            String sql = "select * from " + type + " order by name";
            ResultSet rs = db.select(sql);
            
            while(rs.next()){
                long id = rs.getLong("id");
                String name = rs.getString("name");
                double quantity = rs.getDouble("quantity");
                double price = rs.getDouble("price");
                String description = rs.getString("description");
                String date = rs.getString("date");
                String time = rs.getString("time");
                
                productArray.add(new Product(id, name, quantity, price, description, date, time));
            }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private org.jdesktop.swingx.JXDatePicker jXDatePicker1;
    // End of variables declaration//GEN-END:variables
}
