package GUI;


import Utilities.DatabaseOperations;
import Entities.Product;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Akram Kutifah
 */
public class EditProduct extends javax.swing.JFrame {
    
    SearchAboutProduct search = null;
    DatabaseOperations db = null;
    DefaultTableModel model = null;
    
    ArrayList<String> nameOfTables = null;
    ArrayList<Product> productArray = null;
    
    ArrayList<Double> quantities = null;
    ArrayList<Double> prices = null;
    
    String type = null;
    int counter = 0;
    
    /**
     * Creates new form EditProduct
     */
    public EditProduct() throws Exception {
        initComponents();
        
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment( JLabel.CENTER );
        
        for(int i = 0; i < 4; i++){
            jTable1.getColumnModel().getColumn(i).setHeaderRenderer(centerRenderer);
        }
        
        db = MainFrame.db;
        nameOfTables = new ArrayList<>();
        
        ResultSet rs = db.getNameOfTables();
                while(rs.next()){
                    if(!rs.getString(3).equals("bills") & !rs.getString(3).equals("sells")){
                        nameOfTables.add(rs.getString(3));
                    }
                }
        
                for(int i = 0; i < nameOfTables.size(); i++){
                    jComboBox1.addItem(nameOfTables.get(i));
                }   
                
        jButton1.setEnabled(false);
        jButton2.setEnabled(false);
        jButton3.setEnabled(false);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("تعديل أو حذف عنصر ضمن صنف");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jTable1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jTable1.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "الوصف", "سعر الكمية الواحدة", "الكمية", "الاسم"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jTable1MouseEntered(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTable1MousePressed(evt);
            }
        });
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTable1KeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTable1KeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton1.setBackground(new java.awt.Color(204, 255, 204));
        jButton1.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        jButton1.setText("حفظ التعديلات");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Choose type of product:" }));
        jComboBox1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jComboBox1MouseClicked(evt);
            }
        });
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        jComboBox1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jComboBox1KeyPressed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("اختر الصنف الذي تريد التعديل ضمنه:");

        jButton2.setBackground(new java.awt.Color(204, 255, 204));
        jButton2.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        jButton2.setText("حذف عنصر أو أكثر");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(204, 255, 204));
        jButton3.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        jButton3.setText("اظهار معلومات عنصر معين ضمن هذا الصنف");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 654, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton3)
                        .addGap(83, 83, 83)
                        .addComponent(jButton2)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(28, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(49, 49, 49)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addGap(23, 23, 23))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
        
                String s = null;
                String sql = null;
                boolean state = false;
                
                String name = null;
                String description = null;
                double price = 0.0;
                double quantity = 0.0;
                
                
                for(int row = 0; row < model.getRowCount(); row++){
                    s = "";
                    sql = "";

                    for (int col = 0; col < model.getColumnCount(); col++){
                        s += model.getValueAt(row, col) + ",";
                    }

                    String[] ss = s.split("[,]");
                    name = ss[3];
                    quantity = Double.parseDouble(ss[2]);
                    price = Double.parseDouble(ss[1]);
                    description = ss[0];

                if((!productArray.get(row).getName().equals(name)) || (productArray.get(row).getPrice() != price) || (productArray.get(row).getQuantity() != quantity) || (!productArray.get(row).getDescription().equals(description))){   
                            sql = "update " + type + " set name = '" + name + "', quantity = " + quantity + ", price = " + price + ", description = '" + description + "' where id = " + productArray.get(row).getId() + "";
                            db.update(sql);
                            state = true;
                }
                
                }
                if(state){
                    selectAllProducts(type);
                    update_table(type);

                    JOptionPane.showMessageDialog(null, "تمت عملية التعديل بنجاح");    
                }
        } catch (Exception ex) {
           
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        jButton1.setEnabled(true);
        jButton2.setEnabled(true);
    }//GEN-LAST:event_jTable1MouseClicked

    private void jTable1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseEntered
        
    }//GEN-LAST:event_jTable1MouseEntered

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        
            try {
                
                
                type = (String)jComboBox1.getSelectedItem();
                
                if(type.contains("Choose")){
                    jButton3.setEnabled(false);
                }
                else{
                    jButton3.setEnabled(true);
                }
                update_table(type);
            } catch (Exception ex) {
                Logger.getLogger(EditProduct.class.getName()).log(Level.SEVERE, null, ex);
            }
        
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jComboBox1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jComboBox1KeyPressed
        
    }//GEN-LAST:event_jComboBox1KeyPressed

    private void jComboBox1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBox1MouseClicked
        
    }//GEN-LAST:event_jComboBox1MouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
        if(jTable1.getSelectedRow() >= 0){
            int choice = JOptionPane.showConfirmDialog(null, "هل أنت متأكد من هذه العملية؟", "تنبيه!!!", JOptionPane.YES_NO_OPTION);
            if(choice == JOptionPane.YES_OPTION){
                for(int i = 0; i < jTable1.getSelectedRowCount(); i++){
                    String sql = "delete from " + type + " where id = " + productArray.get(jTable1.getSelectedRows()[i]).getId() + "";
                    db.delete(sql);
                }
                selectAllProducts(type);
                update_table(type);
                JOptionPane.showMessageDialog(null, "تمت عملية الحذف بنجاح");
            }
                
        }
        else{
            JOptionPane.showMessageDialog(null, "يجب أن تختار سطر من الجدول حتى تتم عملية حذف العنصر وذلك عن طريق النقر بالفأرة على السطر المطلوب");
        }
        }catch(Exception e){}
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {
            search = new SearchAboutProduct(type);
            search.setResizable(false);
            search.setVisible(true);
        } catch (Exception ex) {
            Logger.getLogger(EditProduct.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (search != null) 
            this.search.dispose();
        MainFrame.editProduct = null;
    }//GEN-LAST:event_formWindowClosing

    private void jTable1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MousePressed
    
    }//GEN-LAST:event_jTable1MousePressed

    private void jTable1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyTyped
        
    }//GEN-LAST:event_jTable1KeyTyped

    private void jTable1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyReleased
        model = (DefaultTableModel) jTable1.getModel();
        
                if(model.getRowCount() > 0){
                
                    for(int row = 0; row < model.getRowCount(); row++){
                        if(((Double)model.getValueAt(row, 1) < 1) || ((Double)model.getValueAt(row, 2) < 1)){
                            JOptionPane.showMessageDialog(null, "قيمة أحد الحقلين (الكمية، السعر) يجب أن تكون أكبر من الصفر");
                            model.setValueAt(prices.get(row), row, 1);
                            model.setValueAt(quantities.get(row), row, 2);
                        }
                        
                    prices.set(row, (Double)model.getValueAt(row, 1));
                    quantities.set(row, (Double)model.getValueAt(row, 2));
                    }
                    model.fireTableDataChanged();
                    jTable1.setModel(model);
                    
                }
    }//GEN-LAST:event_jTable1KeyReleased

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        if(MainFrame.sync != null){
            jComboBox1.addItem(MainFrame.sync);
            MainFrame.sync = null;
        }
    }//GEN-LAST:event_formWindowActivated

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        
    }//GEN-LAST:event_formWindowOpened

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EditProduct.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EditProduct.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EditProduct.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EditProduct.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new EditProduct().setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(EditProduct.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    
    public void update_table(String type) throws Exception{
            
            counter = 0;
            
            model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0);
            
            if(!type.contains("Choose")){
            
            selectAllProducts(type);
            for(int i = 0; i < productArray.size(); i++){
                model.addRow(new Object[]{productArray.get(i).getDescription(), productArray.get(i).getPrice(), productArray.get(i).getQuantity(), productArray.get(i).getName(), ++counter});
                quantities.add(productArray.get(i).getQuantity());
                prices.add(productArray.get(i).getPrice());
            }
            }
            
            DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
            centerRenderer.setHorizontalAlignment( JLabel.CENTER );
            
            for(int i = 0; i < 4; i++){
            jTable1.getColumnModel().getColumn(i).setCellRenderer( centerRenderer );
            }
            
            jTable1.setModel(model);
            
            model.fireTableDataChanged();
            jButton1.setEnabled(false);
            jButton2.setEnabled(false);
    }
    
    
    public void selectAllProducts(String type) throws SQLException{
            productArray = new ArrayList<>();
            quantities = new ArrayList<>();
            prices = new ArrayList<>();
            
            String sql = "select * from " + type + " order by name";
            ResultSet rs = db.select(sql);
            
            while(rs.next()){
                long id = rs.getLong("id");
                String name = rs.getString("name");
                double quantity = rs.getDouble("quantity");
                double price = rs.getDouble("price");
                String description = rs.getString("description");
                String date = rs.getString("date");
                String time = rs.getString("time");
                
                productArray.add(new Product(id, name, quantity, price, description, date, time));
            }
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
