/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Entities.PlanData;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import static GUI.MainFrame.db;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import java.io.FileNotFoundException;  
import com.itextpdf.text.Paragraph;  
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Desktop;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;

/**
 *
 * @author AkramKutifah
 */
public class Plan extends javax.swing.JFrame {
    
    String jahr;
    String monat;
    ArrayList<String> planDatume;
    ArrayList<PlanData> planData;
    ArrayList<PlanData> original;
    
    DefaultTableModel model = null;
    String absPath;
            
    /**
     * Creates new form Plan
     */
    public Plan() throws SQLException {
        initComponents();
        
        Path currRelativePath = Paths.get("");
        String currAbsolutePathString = currRelativePath.toAbsolutePath().toString();
        if(!isExisted(currAbsolutePathString, "PDF-Dateien")){
            File f = new File(currAbsolutePathString + "/PDF-Dateien");
            f.mkdir();        
        }
        
        absPath = currAbsolutePathString + "/PDF-Dateien";
        jahr = MainFrame.jahrPlan;
        monat = MainFrame.monatPlan;
        planDatume = MainFrame.planDatume;
        
        
        jLabel1.setText(monat + "  " + jahr);
        jLabel2.setVisible(false);
        
        initTable();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Der Plan");

        jLabel1.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 0, 0));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "Name1", "Name2", "Name3", "Name4", "Name5", "Name6", "Reserve"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
            jTable1.getColumnModel().getColumn(4).setResizable(false);
            jTable1.getColumnModel().getColumn(5).setResizable(false);
            jTable1.getColumnModel().getColumn(6).setResizable(false);
            jTable1.getColumnModel().getColumn(7).setResizable(false);
        }

        jButton1.setText("Speichern");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("PDF schauen");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel2.setForeground(new java.awt.Color(255, 0, 0));

        jButton3.setText("PDF erstellen");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel3.setText("Ab 11 Uhr");

        jLabel4.setText("Ab 11 Uhr");

        jLabel5.setText("Ab 11.30");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(498, 498, 498))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jButton1)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton3)
                                    .addGap(18, 18, 18)
                                    .addComponent(jButton2))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 1049, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(200, 200, 200)
                        .addComponent(jLabel3)
                        .addGap(78, 78, 78)
                        .addComponent(jLabel4)
                        .addGap(74, 74, 74)
                        .addComponent(jLabel5)))
                .addContainerGap(57, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addGap(3, 3, 3)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addContainerGap(50, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
            int test = 0;
            planData = new ArrayList<>();

            try {
                String sql = "select name from plan where jahr = " + Integer.parseInt(jahr) + " and monat = " + MainFrame.monatAlsNummer + "";
                ResultSet rs = MainFrame.db.select(sql);
                while(rs.next()){
                    planData.add(new PlanData("", rs.getString("name")));
                }
            
            model = (DefaultTableModel)jTable1.getModel();
            for(int i = 0; i < model.getRowCount(); i++){
                String value = model.getValueAt(i, 0).toString();
                String[] s = value.split(" ");
                int tag = Integer.parseInt(s[1].substring(0, 2));

                for(int j = 1; j < model.getColumnCount(); j++){
                    if((model.getValueAt(i, j) != null) && (!model.getValueAt(i, j).toString().equals("")) && (!model.getValueAt(i, j).toString().matches("[ ]+"))){
                        String name = model.getValueAt(i, j).toString();
                        boolean status = false;
                        for(int o = 0; o < planData.size(); o++){                        
                            if(name.equalsIgnoreCase(planData.get(o).getName())){
                                status = true;
                                planData.get(o).setTage(planData.get(o).getTage() + tag + ",");                                 
                                break;
                            }                        
                        }
                        if(!status){
                            boolean exist = false;
                            for(int x = 0; x < MainFrame.allNamen.size(); x++){
                                if(name.equalsIgnoreCase(MainFrame.allNamen.get(x))){
                                    exist = true;
                                    break;
                                }
                            }
                            if(!exist){                                
                                jLabel2.setText(name.toUpperCase() + " existiert bereits nicht im Team, Sie müssen zuerst IHN/SIE hinzufügen");
                                jLabel2.setVisible(true);
                                test = 1;
                            }
                            else{
                                String temp = tag + ",";
                                planData.add(new PlanData(temp, name));
                                sql = "insert into plan (jahr, monat, tage, name) values (" + Integer.parseInt(jahr) + ", " + MainFrame.monatAlsNummer + ", '" + temp + "', '" + name + "')";
                                try {                    
                                    db.insert(sql);
                                } catch (SQLException ex) {
                                    Logger.getLogger(Plan.class.getName()).log(Level.SEVERE, null, ex);
                                }                                 
                            }
                        }
                    }
                }
            }
            if(test == 0){
                if(isChanged()){
                    updateTable();
                    MainFrame.setTheCheckboxes();
                    jLabel2.setText("Der Änderungsprozess wurde erfolgreich abgeschlossen");
                    jLabel2.setVisible(true);
                }
                else{                    
                    jLabel2.setText("Es gibt keine Änderung");
                    jLabel2.setVisible(true);
                }
            }            
            
            } catch (Exception ex) {
                Logger.getLogger(Plan.class.getName()).log(Level.SEVERE, null, ex);
            }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if(isExisted(absPath, "Mittagstisch " + monat + " " + jahr + ".pdf")){
            try {
                Desktop.getDesktop().open(new File(absPath + "/Mittagstisch " + monat + " " + jahr + ".pdf"));                
            } catch (IOException ex) {
                Logger.getLogger(Plan.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else{
            jLabel2.setText("PDF-Datei existiert nicht");
            jLabel2.setVisible(true);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try  
        { 
            Document doc = new Document();  
                     
            PdfWriter.getInstance(doc, new FileOutputStream("PDF-Dateien/Mittagstisch " + monat + " " + jahr + ".pdf"));  
            doc.open();
            
            Font f = new Font(Font.FontFamily.COURIER, 14, Font.UNDERLINE);
            Paragraph p = new Paragraph("Mittagstisch " + monat.toUpperCase() + " " + jahr, f);
            p.setAlignment(Element.ALIGN_CENTER);
            doc.add(p);
            doc.add(new Paragraph("\n\n\n"));    
            
            PdfPTable table = new PdfPTable(8);
            table.setWidthPercentage(100);            
            table.setWidths(new float[] { 18.5f, 12.5f, 12.5f, 12.5f, 11f, 11f, 11f, 11f });
            PdfPCell cell = null;
            
            f = new Font(Font.FontFamily.HELVETICA, 12, Font.NORMAL);
            int x = 0;
            while(x < 8){
                if(x == 1){
                    cell = new PdfPCell(new Phrase("Ab 11:00", f));                    
                }
                else if(x == 4){
                    cell = new PdfPCell(new Phrase("Ab 11:30", f));                    
                }
                else{
                    cell = new PdfPCell(new Phrase(""));                    
                }
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                x++;
            }
            
            f = new Font(Font.FontFamily.HELVETICA, 12, Font.BOLD);
            x = 0;
            while(x < 8){
                if(x == 0){
                    cell = new PdfPCell(new Phrase(""));                    
                }
                else if(x == 7){
                    cell = new PdfPCell(new Phrase("Reserve", f));                    
                }
                else{
                    cell = new PdfPCell(new Phrase("Name " + x, f));                    
                }
                cell.setBorder(Rectangle.NO_BORDER);                
                table.addCell(cell);
                x++;
            }
            
            x = 0;
            while(x < 8){
                cell = new PdfPCell(new Phrase(" "));
                cell.setBorder(Rectangle.NO_BORDER);
                table.addCell(cell);
                x++;
            }
            
            f = new Font(Font.FontFamily.HELVETICA, 12, Font.NORMAL);
            model = (DefaultTableModel)jTable1.getModel();
            for(int i = 0; i < model.getRowCount(); i++){
                for(int j = 0; j < model.getColumnCount(); j++){                    
                    if((model.getValueAt(i, j) == null) || (model.getValueAt(i, j).toString().equals("")) || (model.getValueAt(i, j).toString().matches("[ ]+"))){
                        cell = new PdfPCell(new Phrase(""));                         
                    }
                    else{
                        cell = new PdfPCell(new Phrase(model.getValueAt(i, j).toString(), f));                        
                    }
                    cell.setBorder(Rectangle.NO_BORDER);
                    table.addCell(cell);
                }
                x = 0;
                while(x < 8){
                    cell = new PdfPCell(new Phrase(" "));
                    cell.setBorder(Rectangle.NO_BORDER);
                    table.addCell(cell);
                    x++;
                }
            }
            doc.add(table);
            doc.close();
            jLabel2.setText("PDF-Datei wurde erfolgreich erstellt");
            jLabel2.setVisible(true);
        }catch (DocumentException e){
            
        }catch (FileNotFoundException e){
            
        }
        
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Plan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Plan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Plan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Plan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Plan().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(Plan.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    
    public void initTable() throws SQLException{
        model = (DefaultTableModel)jTable1.getModel();
        model.setRowCount(0);
        
        original = new ArrayList<>();
        
        for(int i = 0; i < planDatume.size(); i++){            
            model.addRow(new Object[]{planDatume.get(i),
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null
            });
        }
        
        model.fireTableDataChanged();       
        
        String sql = "select tage, name from plan where jahr = " + Integer.parseInt(jahr) + " and monat = " + MainFrame.monatAlsNummer + "";
        ResultSet rs = MainFrame.db.select(sql);
        while(rs.next()){  
            original.add(new PlanData(rs.getString("tage"), rs.getString("name")));
            
            String[] ss = rs.getString("tage").split(",");
            for(int o = 0; o < ss.length; o++){
                for(int i = 0; i < model.getRowCount(); i++){
                    
                    String value = (String)model.getValueAt(i, 0);
                    String[] s = value.split(" ");                        
                        
                    if(Integer.parseInt(ss[o]) == Integer.parseInt(s[1].substring(0, 2))){
                        for(int j = 1; j < model.getColumnCount(); j++){
                            if(model.getValueAt(i, j) == null){
                                model.setValueAt(rs.getString("name"), i, j);
                                break;
                            }                            
                        } 
                    }            
                }
            }
        }
        
        jTable1.setModel(model);
        jTable1.getModel().addTableModelListener(new TableModelListener() {
            public void tableChanged(TableModelEvent e) {                               
                jLabel2.setVisible(false);
                
                /*int indexRow = e.getFirstRow(); 
                int indexColumn = e.getColumn();
                
                if(model.getValueAt(indexRow, indexColumn) != null && !model.getValueAt(indexRow, indexColumn).toString().equals("") && !model.getValueAt(indexRow, indexColumn).toString().matches("[ ]+")){
                    model = (DefaultTableModel)jTable1.getModel();
                    String value2 = model.getValueAt(indexRow, indexColumn).toString();
                    for(int i = 1; i < 8; i++){
                        if(i == indexColumn){
                            continue;
                        }
                        if(model.getValueAt(indexRow, i) != null && !model.getValueAt(indexRow, i).toString().equals("") && !model.getValueAt(indexRow, i).toString().matches("[ ]+")){
                            if(model.getValueAt(indexRow, i).toString().equalsIgnoreCase(value2)){                                
                                model.setValueAt(null, indexRow, indexColumn);
                                jLabel2.setText("Er/Sie existiert bereits an diesem Tag");
                                jLabel2.setVisible(true);
                                break;                           
                            }
                        }
                    }
               }*/
            }
        });
    }
    
    public void updateTable(){
        try {
        original = new ArrayList<>();
        for(int i = 0; i < planData.size(); i++){
            String sql = "update plan set tage = '" + planData.get(i).getTage() + "' where jahr = " + Integer.parseInt(jahr) + " and monat = " + MainFrame.monatAlsNummer + " and name = '" + planData.get(i).getName() + "'";
            db.update(sql);                                
        }
                String sql = "delete from plan where tage = '' and jahr = " + Integer.parseInt(jahr) + " and monat = " + MainFrame.monatAlsNummer + "";
                MainFrame.db.delete(sql);
                sql = "select tage, name from plan where jahr = " + Integer.parseInt(jahr) + " and monat = " + MainFrame.monatAlsNummer + "";
                ResultSet rs = MainFrame.db.select(sql);
                while(rs.next()){  
                    original.add(new PlanData(rs.getString("tage"), rs.getString("name")));
                }        
        } catch (SQLException ex) {
            Logger.getLogger(Plan.class.getName()).log(Level.SEVERE, null, ex);
        }        
    }

    
    public boolean isChanged(){
        if(planData.size() != original.size()){
            return true;
        }
        else{            
            for(int i = 0; i < planData.size(); i++){
                int exist = 0; 
                for(int j = 0; j < original.size(); j++){
                    if(planData.get(i).getName().equalsIgnoreCase(original.get(j).getName())){
                        exist++;
                        
                        String[] ss = planData.get(i).getTage().split(",");
                        String[] ss2 = original.get(j).getTage().split(",");
                        if(ss.length != ss2.length){
                            return true;
                        }
                        else{
                            int status = 0;
                            for(int o = 0; o < ss.length; o++){
                                for(int x = 0; x < ss2.length; x++){
                                    if(ss[o].equalsIgnoreCase(ss2[x])){
                                        status++;
                                        break;
                                    }                                
                                }
                            }
                            if(status != ss.length){
                                return true;
                            }
                        }
                        break;
                    }                    
                }
                if(exist == 0){
                   return true;
                }
            }            
            return false;
        }
    }
    
    public boolean isExisted(String path, String name){
            File f = new File(path);
            for(File fileEntry : f.listFiles()){
                if(fileEntry.getName().equals(name)){
                    return true;
                }
            }
            return false;            
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
